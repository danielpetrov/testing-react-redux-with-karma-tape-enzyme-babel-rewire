'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isLoadingSelector = undefined;

exports.default = function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
    var action = arguments[1];

    switch (action.type) {
        case _loading.START_LOADING:
            {
                var loader = action.payload.loader;


                state = state.set(loader, true);
            }
            break;
        case _loading.STOP_LOADING:
            {
                var _loader = action.payload.loader;


                state = state.set(_loader, false);
            }
            break;
        default:
            break;
    }

    return state;
};

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _loading = require('../constants/loading');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// initial state for loading
var initialState = _immutable2.default.Map({});

// a reducer is a pure function that takes state and action and returns new state without mutating the old one
var isLoadingSelector = exports.isLoadingSelector = function isLoadingSelector(state, loader) {
    return !!state.get(loader);
};
{"version":3,"sources":["app/js/reducers/loading.js"],"names":["state","initialState","action","type","loader","payload","set","Map","isLoadingSelector","get"],"mappings":";;;;;;;kBAUe,YAAwC;AAAA,QAA9BA,KAA8B,uEAAtBC,YAAsB;AAAA,QAARC,MAAQ;;AACnD,YAAQA,OAAOC,IAAf;AACI;AACI;AAAA,oBACYC,MADZ,GACuBF,OAAOG,OAD9B,CACYD,MADZ;;;AAGIJ,wBAAQA,MAAMM,GAAN,CAAUF,MAAV,EAAkB,IAAlB,CAAR;AACH;AACD;AACJ;AACI;AAAA,oBACYA,OADZ,GACuBF,OAAOG,OAD9B,CACYD,MADZ;;;AAGIJ,wBAAQA,MAAMM,GAAN,CAAUF,OAAV,EAAkB,KAAlB,CAAR;AACH;AACD;AACJ;AACI;AAhBR;;AAmBA,WAAOJ,KAAP;AACH,C;;AA/BD;;;;AACA;;;;AAKA;AACA,IAAMC,eAAe,oBAAUM,GAAV,CAAc,EAAd,CAArB;;AAEA;AAwBO,IAAMC,gDAAoB,SAApBA,iBAAoB,CAACR,KAAD,EAAQI,MAAR;AAAA,WAAmB,CAAC,CAACJ,MAAMS,GAAN,CAAUL,MAAV,CAArB;AAAA,CAA1B","file":"loading.js","sourceRoot":"/home/danielpetrov/Public/Work/testing","sourcesContent":["import Immutable from 'immutable'\nimport {\n    START_LOADING,\n    STOP_LOADING\n} from '../constants/loading'\n\n// initial state for loading\nconst initialState = Immutable.Map({})\n\n// a reducer is a pure function that takes state and action and returns new state without mutating the old one\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case START_LOADING:\n            {\n                const { loader } = action.payload\n\n                state = state.set(loader, true)\n            }\n            break\n        case STOP_LOADING:\n            {\n                const { loader } = action.payload\n\n                state = state.set(loader, false)\n            }\n            break\n        default:\n            break\n    }\n\n    return state\n}\n\nexport const isLoadingSelector = (state, loader) => !!state.get(loader)\n"]}